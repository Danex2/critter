### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatNullableListFilter {
  equals: [Float!]
  has: Float
  hasEvery: [Float!]
  hasSome: [Float!]
  isEmpty: Boolean
}

type Image {
  Pet: Pet
  id: String!
  url: String!
}

input ImageCreateNestedManyWithoutPetInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutPetInput!]
  create: [ImageCreateWithoutPetInput!]
}

input ImageCreateOrConnectWithoutPetInput {
  create: ImageCreateWithoutPetInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutPetInput {
  id: String
  url: String!
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  id: StringFilter
  petId: StringNullableFilter
  url: StringFilter
}

input ImageUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateManyWithWhereWithoutPetInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithoutPetInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutPetInput!]
  create: [ImageCreateWithoutPetInput!]
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutPetInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutPetInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutPetInput!]
}

input ImageUpdateWithWhereUniqueWithoutPetInput {
  data: ImageUpdateWithoutPetInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithoutPetInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpsertWithWhereUniqueWithoutPetInput {
  create: ImageCreateWithoutPetInput!
  update: ImageUpdateWithoutPetInput!
  where: ImageWhereUniqueInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  Pet: PetWhereInput
  id: StringFilter
  petId: StringNullableFilter
  url: StringFilter
}

input ImageWhereUniqueInput {
  id: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOnePet(data: PetCreateInput!): Pet!
  deleteOnePet(where: PetWhereUniqueInput!): Pet
  updateOnePet(data: PetUpdateInput!, where: PetWhereUniqueInput!): Pet
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Pet {
  address: String!
  breed: String!
  city: String!
  createdAt: DateTime!
  description: String!
  id: String!
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  location: [Float!]!
  name: String!
  phoneNumber: String!
  updatedAt: DateTime!
  user: User!
}

input PetCreateInput {
  address: String!
  breed: String!
  city: String!
  createdAt: DateTime
  description: String!
  id: String
  images: ImageCreateNestedManyWithoutPetInput
  location: PetCreatelocationInput
  name: String!
  phoneNumber: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPetInput!
}

input PetCreatelocationInput {
  set: [Float!]
}

input PetOrderByInput {
  address: SortOrder
  breed: SortOrder
  city: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  location: SortOrder
  name: SortOrder
  phoneNumber: SortOrder
  updatedAt: SortOrder
  user: UserOrderByInput
  userId: SortOrder
}

input PetUpdateInput {
  address: StringFieldUpdateOperationsInput
  breed: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPetInput
  location: PetUpdatelocationInput
  name: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPetInput
}

input PetUpdatelocationInput {
  set: [Float!]
}

input PetWhereInput {
  AND: [PetWhereInput!]
  NOT: [PetWhereInput!]
  OR: [PetWhereInput!]
  address: StringFilter
  breed: StringFilter
  city: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  images: ImageListRelationFilter
  location: FloatNullableListFilter
  name: StringFilter
  phoneNumber: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input PetWhereUniqueInput {
  id: String
}

type Query {
  pet(where: PetWhereUniqueInput!): Pet
  pets(after: PetWhereUniqueInput, before: PetWhereUniqueInput, first: Int, last: Int, orderBy: [PetOrderByInput!], where: PetWhereInput): [Pet!]!
  user(where: UserWhereUniqueInput!): User
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String
  id: Int!
  name: String
  pet: Pet
}

input UserCreateNestedOneWithoutPetInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpetInput
  create: UserCreateWithoutPetInput
}

input UserCreateOrConnectWithoutpetInput {
  create: UserCreateWithoutPetInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPetInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserUpdateOneRequiredWithoutPetInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpetInput
  create: UserCreateWithoutPetInput
  update: UserUpdateWithoutPetInput
  upsert: UserUpsertWithoutPetInput
}

input UserUpdateWithoutPetInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutPetInput {
  create: UserCreateWithoutPetInput!
  update: UserUpdateWithoutPetInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  pet: PetWhereInput
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
